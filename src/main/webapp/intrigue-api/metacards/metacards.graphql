scalar Json
# Binary content embedded as a base64 String
scalar Binary
# WKT embedded as a String
scalar Geometry
# XML embedded as a String
scalar XML
# ISO 8601 Data Time embedded as a String
scalar Date

# Common and well known metacard attributes intended for progrmatic usage
type MetacardAttributes {
  id: ID!
}

input MetacardAttributesInput {
  id: ID!
}

enum Direction {
  # Smaller to Larger values
  asc
  # Smaller to Larger values
  ascending
  # Larger to Smaller values
  desc
  # Larger to Smaller values
  descending
}

input QuerySortInput {
  attribute: String
  direction: Direction
}

type QuerySort {
  attribute: String
  direction: Direction
}

input QuerySettingsInput {
  src: String
  federation: String
  phonetics: Boolean
  sorts: [QuerySortInput]
  spellcheck: Boolean

  # Page size
  count: Int

  # Start of paging. First element is 1, not 0.
  start: Int
  type: String
}

type QueryResponseStatus {
  count: Int
  elapsed: Int
  hits: Int
  id: ID
  successful: Boolean
}

type MetacardAction {
  description: String
  displayName: String
  id: ID
  title: String
  url: String
}

type QueryResponseResult {
  actions: [MetacardAction]
  # All known metacard attributes with raw attributes names.
  # This is intended for views that are interested in:
  # 1. Using raw attribute names.
  # 2. Attribute aliasing that require raw attribute names.
  # 3. Getting all the possible attributes.
  metacard: Json
}

type QueryResponse {
  results: [QueryResponseResult]
  attributes: [MetacardAttributes]
  status: QueryResponseStatus
}

extend type Query {
  metacards(filterTree: Json!, settings: QuerySettingsInput): QueryResponse
}
